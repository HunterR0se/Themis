"""
Document assembly functions for creating combined reports
"""
import os
from datetime import datetime
from pathlib import Path
from colorama import Fore

from themis_lib.ui import print_status

def combine_documents(case_dir, model_name, analysis_md_path, defense_strategy_path, 
                      action_items_path, timeline_path, output_path=None):
    """
    Combine multiple markdown documents into a single comprehensive report
    
    Args:
        case_dir: Path to the case directory
        model_name: Name of the model used
        analysis_md_path: Path to the analysis markdown file
        defense_strategy_path: Path to the defense strategy markdown file
        action_items_path: Path to the action items markdown file
        timeline_path: Path to the timeline markdown file
        output_path: Custom output path (optional - will generate default if None)
        
    Returns:
        Path to the created document
    """
    # If output path is not specified, create default
    if output_path is None:
        date_str = datetime.now().strftime('%Y%m%d')
        output_filename = f"{date_str}_full_{model_name}.md"
        output_path = Path(case_dir) / output_filename
    else:
        output_path = Path(output_path)
    
    print_status(f"Generating comprehensive report: {Fore.CYAN}{output_path}{Fore.YELLOW}...", Fore.YELLOW)
    
    # Read content from each file while handling missing files gracefully
    def read_file_content(file_path):
        try:
            with open(file_path, 'r') as f:
                return f.read()
        except (FileNotFoundError, IOError) as e:
            print_status(f"Warning: Could not read {file_path}: {str(e)}", Fore.YELLOW)
            return f"*Content from {os.path.basename(file_path)} could not be loaded.*\n\n"
            
    # Read content of all individual files
    analysis_content = read_file_content(analysis_md_path)
    strategy_content = read_file_content(defense_strategy_path)
    actions_content = read_file_content(action_items_path)
    timeline_content = read_file_content(timeline_path)
    
    # Create header for the combined document
    header = f"""# Comprehensive Legal Case Report

*Generated by Themis on {datetime.now().strftime('%Y-%m-%d at %H:%M')} using {model_name}*

---

## Table of Contents

1. [Document Analysis](#document-analysis)
2. [Defense Strategy](#defense-strategy)
3. [Action Items](#action-items) 
4. [Case Timeline](#case-timeline)

---

"""
    
    # Create combined content with section dividers
    combined_content = header
    
    # Add document analysis section with anchor
    combined_content += "<a id='document-analysis'></a>\n\n"
    combined_content += "# Document Analysis\n\n"
    combined_content += analysis_content
    combined_content += "\n\n---\n\n"
    
    # Add defense strategy section with anchor
    combined_content += "<a id='defense-strategy'></a>\n\n"
    strategy_content = strategy_content.replace("# Defense Strategy", "# Defense Strategy", 1)  # Remove duplicate header
    combined_content += strategy_content
    combined_content += "\n\n---\n\n"
    
    # Add action items section with anchor
    combined_content += "<a id='action-items'></a>\n\n"
    actions_content = actions_content.replace("# Action Items", "# Action Items", 1)  # Remove duplicate header
    combined_content += actions_content
    combined_content += "\n\n---\n\n"
    
    # Add timeline section with anchor
    combined_content += "<a id='case-timeline'></a>\n\n"
    timeline_content = timeline_content.replace("# Case Timeline", "# Case Timeline", 1)  # Remove duplicate header
    combined_content += timeline_content
    
    # Add footer
    combined_content += "\n\n---\n\n*End of Comprehensive Case Report*\n"
    
    # Write combined document
    with open(output_path, 'w') as f:
        f.write(combined_content)
    
    print_status(f"Comprehensive report created at {Fore.CYAN}{output_path}{Fore.GREEN}", Fore.GREEN)
    return output_path